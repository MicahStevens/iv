# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
# noqa: eol-semicolon
from __python__ import hash_literals, bound_methods

from elementmaker import E
from gettext import gettext as _
from keycodes import get_key

from utils import tooltip, debounce, update_settings

PLACEHOLDER_COUNT = 50
SPACING = 10

id_map = {}
image_refs = {}

def show_text(key, txt, showing):
    div = document.getElementById(id_map[key])
    div.innerHTML = ''
    div.appendChild(E.div(style='width:100%; height:100%', E.div(style='text-align:center;')))
    div.lastChild.lastChild.innerHTML = txt
    div.dataset.showing = showing or 'text'
    div = div.firstChild
    div.style.border = 'dashed 1px'
    div.style.display = 'flex'
    div.style.alignItems = 'center'
    div.style.justifyContent = 'center'

def show_image(key):
    img = new Image()
    img.dataset.key = key
    img.dataset.tooltip = tooltip(key)
    img.dataset.container_id = id_map[key]
    img.onload = on_img_load
    img.onerror = on_img_error
    img.src = key
    image_refs[key] = img
    show_text(key, _('Loading...'), 'image')

def on_img_error(err):
    key = this.dataset.key
    div = document.getElementById(id_map[key])
    md = window.image_data[key]
    show_text(key, md.name, 'image')
    v'delete image_refs[key]'
    div.dataset.showing = 'image'
    div.dataset.img_failed = '1'

def on_img_load():
    w, h = this.width, this.height
    this.dataset.tooltip = tooltip(this.dataset.key, w, h)
    this.onmouseenter = show_tooltip
    this.onmouseleave = hide_tooltip
    this.onclick = onclick
    div = document.getElementById(this.dataset.container_id)
    div.innerHTML = ''
    div.appendChild(this)
    div.appendChild(E.div(window.image_data[this.dataset.key].name.rpartition('.')[0], class_='caption'))

def show_tooltip(ev):
    img = ev.currentTarget
    tt = ev.currentTarget.dataset.tooltip
    div = document.getElementById('thumbnail-tooltip')
    div.innerHTML = tt
    br = img.getBoundingClientRect()
    if br.left < window.innerWidth / 2:
        div.style.left, div.style.right = f'{br.right}px', 'auto'
    else:
        div.style.left, div.style.right = 'auto', f'{document.body.clientWidth - br.left}px'
    y = window.pageYOffset + max(0, br.top)
    div.style.top = f'{y}px'
    div.style.display = 'block'

def hide_tooltip(ev):
    document.getElementById('thumbnail-tooltip').style.display = 'none'

def create_item(key):
    create_item.count += 1
    id_map[key] = 'img' + create_item.count
    div = E.div(id=id_map[key], class_='thumbnail item', data_key=key)
    setTimeout(def():
        show_text(key, _('Loading...'))
    , 0)
    return div

create_item.count = 0


def get_container(elem):
    while elem and elem.classList:
        if elem.classList.contains('thumbnail'):
            return elem
        elem = elem.parentNode

def sibling_distance(first, last):
    ans = 0
    while first and first is not last:
        first = first.nextSibling
        ans += 1
    return ans

def nth_sibling(origin, axis, n):
    while n > 0:
        q = origin[axis]
        if not q:
            return origin
        n -= 1
        origin = q
    return origin

def update_loaded_images():
    br = document.getElementById('grid').getBoundingClientRect()
    if br.height < window.innerHeight + 100:
        items = document.getElementsByClassName('thumbnail item')
        first, last = items[0], items[-1]
    else:
        first = last = None
        for dx in range(5, br.width, 5):
            if not first:
                for dy in range(5, window.innerHeight, 5):
                    elem = get_container(document.elementFromPoint(dx, dy))
                    if elem:
                        first = elem
                        break
        for dx in range(5, br.width, 5):
            if not last:
                for dy in range(5, window.innerHeight, 5):
                    elem = get_container(document.elementFromPoint(window.innerWidth - dx, window.innerHeight - dy))
                    if elem:
                        last = elem
                        break
    if first and last:
        number_per_screen = sibling_distance(first, last)
        first = nth_sibling(first, 'previousSibling', number_per_screen)
        last = nth_sibling(last, 'nextSibling', number_per_screen)
        seen_first = seen_last = False
        for node in first.parentNode.childNodes:
            if node.dataset.key:
                if seen_last:
                    needs_image = False
                else:
                    seen_last = node is last
                    if seen_first:
                        needs_image = True
                    else:
                        seen_first = node is first
                        needs_image = seen_first
                if needs_image:
                    if node.dataset.showing is not 'image':
                        if not node.dataset.img_failed:
                            show_image(node.dataset.key)
                else:
                    if node.dataset.showing is not 'text':
                        show_text(node.dataset.key, _('Loading...'))
                        v'delete image_refs[node.dataset.key]'
            else:
                break


def change_thumbnail_size(new_size):
    new_size = int(new_size)
    if new_size is not window.config.thumbnail_size:
        window.config.thumbnail_size = new_size
        for t in document.getElementsByClassName('thumbnail'):
            ts = t.style
            ts.maxWidth = ts.minWidth = ts.width = f'{new_size}px'
            if not t.classList.contains('empty'):
                ts.maxHeight = ts.minHeight = ts.height = f'{new_size}px'
                cs = t.lastChild.style
                cs.maxWidth = cs.minWidth = cs.width = f'{new_size}px'
        update_loaded_images()
        update_settings()

def onscroll(ev):
    if document.getElementById('grid').style.display is not 'none':
        setTimeout(update_loaded_images, 0)

def onresize(ev):
    if document.getElementById('grid').style.display is not 'none':
        setTimeout(update_loaded_images, 0)

def bump_thumbnail_size(decrease):
    delta = 32
    if decrease:
        delta *= -1
    sz = window.config.thumbnail_size + delta
    sz = max(32, min(sz, 500))
    change_thumbnail_size(sz)

def onwheel(ev):
    if ev.ctrlKey and ev.deltaY is not 0:
        ev.preventDefault(), ev.stopPropagation()
        bump_thumbnail_size(ev.deltaY > 0)

def toggle_caption():
    document.getElementById('grid').classList.toggle('no-caption')
    window.config.show_captions ^= True
    update_settings()

def onclick():
    window.show_image(this.dataset.key)

def onkeydown(ev):
    key = get_key(ev)
    if key is '+':
        bump_thumbnail_size()
        return True
    elif key is '-':
        bump_thumbnail_size(True)
        return True
    elif key is 'c':
        toggle_caption()
        return True

def sort_key(f):
    return f.rpartition('/')[::2]

def create_grid():
    window.addEventListener('scroll', debounce(onscroll, 250))
    window.addEventListener('resize', debounce(onresize, 250))
    css = '''
    #grid .thumbnail {
        margin: {margin}px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-end;
        max-width: {sz}px;
        max-height: {sz}px;
        min-width: {sz}px;
        min-height: {sz}px;
        height: {sz}px;
        width: {sz}px;
    }
    #grid .thumbnail > img {
        cursor: pointer;
        max-width: 100%;
        max-height: 100%;
        display: block;
    }
    #grid .thumbnail > .caption {
        max-width: {sz}px;
        width: {sz}px;
        font-size: smaller;
        background-color: rgba(0,0,0,0.7);
        color: white;
        white-space: nowrap;
        text-align: center;
        text-overflow: ellipsis;
        overflow: hidden;
        transform: translateY(-100%);
        position: absolute;
        pointer-events: none;
    }

    #grid.no-caption .thumbnail > .caption {
        display: none;
    }

    #grid .thumbnail > img:hover {
        z-index: 2;
        transform: scale(2);
    }
    #grid .thumbnail.empty {
        height: 0; max-height: 0; min-height: 0;
    }
    #grid #thumbnail-tooltip {
        z-index: 5;
        display: none;
        cursor: default;
        white-space: pre-wrap;
        position:absolute;
        background-color: rgba(0, 0, 0, 0.7);
        padding: 1ex 1rem;
        border-radius: 4px;
        color: white;
        pointer-events: none;
    }
    '''.replace(/{sz}/g, str(window.config.thumbnail_size)).replace(/{margin}/g, str(SPACING))
    ans = E.div(id='grid', style='overflow:hidden; min-height: 100vh')
    if not window.config.show_captions:
        ans.classList.add('no-caption')
    ans.appendChild(E.style(css, type='text/css'))
    c = E.div(style='display: flex; flex-wrap: wrap; justify-content: space-around; align-items: flex-end; align-content: flex-start; user-select: none; overflow:hidden')
    ans.appendChild(c)
    for f in sorted(window.image_data, key=sort_key):
        c.appendChild(create_item(f))
    for i in range(PLACEHOLDER_COUNT):
        c.appendChild(E.div(class_='thumbnail empty'))
    ans.appendChild(E.div(id='thumbnail-tooltip'))
    ans.addEventListener('mousewheel', onwheel, True)
    return ans

