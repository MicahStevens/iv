# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods


def human_readable(size, sep=' '):
    divisor, suffix = 1, "B"
    for i, candidate in enumerate(('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB')):
        if size < (1 << ((i + 1) * 10)):
            divisor, suffix = (1 << (i * 10)), candidate
            break
    size = (float(size)/divisor) + ''
    pos = size.find(".")
    if pos > -1:
        size = size[:pos + 2]
    if size.endswith('.0'):
        size = size[:-2]
    return size + sep + suffix


def debounce(func, wait, immediate=False):
    # Returns a function, that, as long as it continues to be invoked, will not
    # be triggered. The function will be called after it stops being called for
    # wait milliseconds. If `immediate` is True, trigger the function on the
    # leading edge, instead of the trailing.
    timeout = None
    return def debounce_inner():  # noqa: unused-local
        nonlocal timeout
        context, args = this, arguments
        def later():
            nonlocal timeout
            timeout = None
            if not immediate:
                func.apply(context, args)
        call_now = immediate and not timeout
        window.clearTimeout(timeout)
        timeout = window.setTimeout(later, wait)
        if call_now:
            func.apply(context, args)
