# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
# noqa: eol-semicolon
from __python__ import hash_literals, bound_methods

from elementmaker import E
from gettext import gettext as _
from keycodes import get_key
from utils import tooltip, update_settings, refresh_img

zoom = 1
current_url = None

def show_text(txt):
    single = document.getElementById('single').firstChild
    single.innerHTML = ''
    single.appendChild(E.div(txt, style='text-align: center'))

def on_img_load_error(ev):
    show_text(_('Failed to load image:') + ' ' + this.src)

def on_img_load(ev):
    single = document.getElementById('single').firstChild
    single.innerHTML = ''
    set_caption(tooltip(this.dataset.key, this.naturalWidth, this.naturalHeight))
    this.oncontextmenu = show_context_menu
    single.appendChild(this)


def caption_elem():
    return document.querySelector('#single > span')

def set_caption(txt):
    c = caption_elem()
    c.innerHTML = txt

def show_context_menu(ev):
    ev.preventDefault()
    menu = document.getElementById('context-menu')
    if not menu:
        return
    menu.style.display = 'block'
    menu.style.left = f'{ev.pageX}px'
    menu.style.top = f'{ev.pageY}px'
    menu.dataset.image_url = current_url

def hide_context_menu(ev):
    menu = document.getElementById('context-menu')
    if menu:
        menu.style.display = 'none'

def on_menu_item_click(ev):
    action = ev.target.dataset.action
    menu = document.getElementById('context-menu')
    if action is 'set_wallpaper' and menu:
        window.send_message_to_python('set_wallpaper', url=menu.dataset.image_url)
    hide_context_menu(ev)

def create_single():
    ans = E.div(id='single')
    ans.appendChild(E.div())
    ans.appendChild(E.style('''
    #single > div {
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #single > div > img {
        max-width: 100%;
        max-height: 100%;
        display: block;
    }

    #single > span {
        display: block;
        position: fixed;
        bottom: 0;
        right: 0;
        white-space: pre-wrap;
        position:absolute;
        background-color: rgba(0, 0, 0, 0.7);
        padding: 1ex 1rem;
        border-radius: 4px;
        color: white;
        pointer-events: none;
    }
    
    #context-menu {
        display: none;
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.2);
        z-index: 1000;
        min-width: 150px;
    }
    
    #context-menu .menu-item {
        padding: 8px 16px;
        cursor: pointer;
        user-select: none;
    }
    
    #context-menu .menu-item:hover {
        background-color: #f0f0f0;
    }
    ''', type='text/css'))
    ans.appendChild(E.span())
    if not window.config.show_single_caption:
        ans.lastChild.style.display = 'none'

    # Add context menu
    menu = E.div(id='context-menu')
    menu.appendChild(E.div(_('Set as Wallpaper'), class_='menu-item', data_action='set_wallpaper'))
    menu.addEventListener('click', on_menu_item_click)
    ans.appendChild(menu)
    
    # Hide context menu when clicking elsewhere
    document.addEventListener('click', hide_context_menu)

    return ans

def set_image(url):
    nonlocal current_url
    set_caption(tooltip(url))
    img = new Image()
    img.onerror = on_img_load_error
    img.onload = on_img_load
    img.dataset.key = url
    show_text(_('Loading...'))
    img.src = current_url = url


def apply_zoom():
    s = document.querySelector('#single img').style
    if zoom is 1:
        s.transform = 'none'
    else:
        s.transform = f'scale({zoom})'

def bump_zoom(decrease):
    nonlocal zoom
    delta = 0.2 * (-1 if decrease else 1)
    nz = delta + zoom
    nz = max(0.2, min(nz, 10))
    if nz is not zoom:
        zoom = nz
        apply_zoom()

def onkeydown(ev):
    key = get_key(ev)
    if key is 'escape':
        window.show_grid()
        return True
    if key is 'c':
        window.config.show_single_caption ^= True
        caption_elem().style.display = 'block' if window.config.show_single_caption else 'none'
        update_settings()
        return True
    if key is '+':
        bump_zoom()
        return True
    if key is '-':
        bump_zoom(True)
        return True
    if key is '0':
        nonlocal zoom
        zoom = 1
        apply_zoom()
        return True
    if key is 'r' or key is 'f5':
        i = document.querySelector('#single img')
        refresh_img(i)
        return True
    if key is 'space' or key is 'down' or key is 'right' or key is 'pagedown' or key in 'jl':
        window.show_next_image(current_url, 1)
        return True
    if key is 'backspace' or key is 'up' or key is 'left' or key is 'pageup' or key in 'hk':
        window.show_next_image(current_url, -1)
        return True
    if key is 'w':
        window.send_message_to_python('set_wallpaper', url=current_url)
        return True
    if key is 'x':
        window.send_message_to_python('exit_application')
        return True

def reload_image(key):
    i = document.querySelector('#single img')
    if i and i.dataset.key is key:
        refresh_img(i)
